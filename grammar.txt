NUMBER ::= [0-9]+(.[0-9]+)?
BOOLEAN ::= 'true' | 'false'
IDENTIFIER ::= [a-zA-Z][0-9a-zA-Z]*

MAIN ::= {FUNC_OR_STAT}
FUNC_OR_STAT ::= FUNCTION | STATEMENT
CURRENCY_VAL ::= NUMBER IDENTIFIER
CURRENCY_DECLARATION ::= 'currency' IDENTIFIER {',' IDENTIFIER}
CURRENCY_DEFINITION ::= 'exrate' IDENTIFIER '=' CURRENCY_VAL

VAR_DEFINITION ::= 'var' IDENTIFIER '=' EXPRESSION
STATEMENT ::= CURRENCY_DECLARATION ';' | CURRENCY_DEFINITION ';' |  VAR_DEFINITION ';' | IF | WHILE
BLOCK ::= STATEMENT | '{' {STATEMENT} '}'
IF ::= 'if' '(' EXPRESSION ')' BLOCK [ 'else' BLOCK ]
WHILE ::= 'while' '(' EXPRESSION ')' BLOCK
FUNC_PARAMS ::= [IDENTIFIER {',' IDENTIFIER}]
FUNCTION ::= 'function' IDENTIFIER '('  FUNC_PARAMS ')' '{' {STATEMENT | (RETURN ';') } '}'
CALL ::= IDENTIFIER '(' [EXPRESSION {',' EXPRESSION}] ')'
RETURN ::= 'return' EXPRESSION

EXPRESSION ::= BINARY_OR
BINARY_ASSIGN ::= BINARY_OR {SIGN_ASSIGN BINARY_OR}
BINARY_OR ::= BINARY_AND {SIGN_OR BINARY_AND}
BINARY_AND ::= BINARY_RELATION {SIGN_AND BINARY_RELATION}
BINARY_RELATION ::= BINARY_SUM {SIGN_COMPARISON BINARY_SUM}
BINARY_SUM ::= BINARY_MUL {SIGN_SUM BINARY_MUL}
BINARY_MUL ::= BASE_VAL {SIGN_MUL BASE_VAL}
BASE_VAL ::= [SIGN_UNARY](CURRENCY_VAL | CALL | EXPRESSION | IDENTIFIER_EXP | PARENTH_EXP | BOOLEAN )
IDENTIFIER_EXP ::= IDENTIFIER ['as' IDENTIFIER]
PARENTH_EXP ::= '(' EXPRESSION ')'

SIGN_ASSIGN ::= '='
SIGN_OR ::= '|'
SIGN_AND ::= '&'
SIGN_COMPARISON ::= '==' | '!=' | '<' | '<=' | '>' | '>='
SIGN_SUM ::= '+' | '-'
SIGN_MUL ::= '*' | '/'
SIGN_UNARY ::= '!' | '+' | '-'
