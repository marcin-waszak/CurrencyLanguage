NUMBER ::= [0-9]+(.[0-9]+)?
BOOLEAN ::= 'true' | 'false'
IDENTIFIER ::= [a-zA-Z_][0-9a-zA-Z_]*
STRING ::= \"(\\.|[^\\"])*\"

MAIN ::= {FUNCTION | STATEMENT}
CURRENCY_VAL ::= NUMBER IDENTIFIER
CURRENCY_DECLARATION ::= 'currency' IDENTIFIER {',' IDENTIFIER}
CURRENCY_DEFINITION ::= 'exrate' IDENTIFIER '=' CURRENCY_VAL

ASSIGN ::= IDENTIFIER SIGN_ASSIGN EXPRESSION
VAR_DEFINITION ::= 'var' ASSIGN
STATEMENT ::= CURRENCY_DECLARATION ';' | CURRENCY_DEFINITION ';' |  VAR_DEFINITION ';' | ASSIGN ';' | IF | WHILE | CALL ';' | RETURN ';'
BLOCK ::= STATEMENT | '{' {STATEMENT} '}'
IF ::= 'if' '(' EXPRESSION ')' BLOCK IF_TEMP
IF_TEMP ::= 'else' BLOCK | _EPSILON_
WHILE ::= 'while' '(' EXPRESSION ')' BLOCK
FUNC_PARAMS ::= [IDENTIFIER {',' IDENTIFIER}]
FUNCTION ::= 'function' IDENTIFIER '('  FUNC_PARAMS ')' '{' {STATEMENT} '}'
CALL ::= BUILTIN_CALL | CUSTOM_CALL
BUILTIN_CALL ::= PRINT
CUSTOM_CALL ::= IDENTIFIER '(' [EXPRESSION {',' EXPRESSION}] ')'
RETURN ::= 'return' [EXPRESSION]
PRINT ::= 'print' '(' (STRING | EXPRESSION) {',' (STRING | EXPRESSION)} ')'

EXPRESSION ::= BINARY_OR
BINARY_OR ::= BINARY_AND {SIGN_OR BINARY_AND}
BINARY_AND ::= BINARY_EQ {SIGN_AND BINARY_EQ}
BINARY_EQ ::= BINARY_RELATION {SIGN_EQ BINARY_RELATION}
BINARY_RELATION ::= BINARY_SUM {SIGN_RELATION BINARY_SUM}
BINARY_SUM ::= BINARY_MUL {SIGN_SUM BINARY_MUL}
BINARY_MUL ::= VALUE {SIGN_MUL VALUE}
VALUE ::= [SIGN_UNARY](CURRENCY_VAL | CALL | IDENTIFIER_EXP | PARENTH_EXP | BOOLEAN)
IDENTIFIER_EXP ::= IDENTIFIER [AS_CAST]
PARENTH_EXP ::= '(' EXPRESSION ')' [AS_CAST]

AS_CAST ::= 'as' IDENTIFIER
SIGN_ASSIGN ::= '='
SIGN_OR ::= '|'
SIGN_AND ::= '&'
SIGN_EQ ::= '==' | '!='
SIGN_RELATION ::= '<' | '<=' | '>' | '>='
SIGN_SUM ::= '+' | '-'
SIGN_MUL ::= '*' | '/'
SIGN_UNARY ::= '!' | '+' | '-'
